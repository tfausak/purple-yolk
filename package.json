{
  "//": "https://code.visualstudio.com/api/references/extension-manifest",
  "badges": [
    {
      "description": "Build status",
      "href": "https://github.com/tfausak/purple-yolk/actions",
      "url": "https://github.com/tfausak/purple-yolk/workflows/Workflow/badge.svg"
    }
  ],
  "categories": [
    "Formatters",
    "Linters",
    "Programming Languages",
    "Snippets"
  ],
  "contributes": {
    "commands": [
      {
        "category": "Purple Yolk",
        "command": "purple-yolk.haskell.interpret",
        "title": "Start Interpreter",
        "when": "editorLangId == haskell"
      },
      {
        "category": "Purple Yolk",
        "command": "purple-yolk.haskell.lint",
        "title": "Lint Document",
        "when": "editorLangId == haskell"
      },
      {
        "category": "Purple Yolk",
        "command": "purple-yolk.output.show",
        "title": "Show Output"
      }
    ],
    "configuration": {
      "properties": {
        "purple-yolk.cabal.formatter.command": {
          "default": "",
          "description": "The command to run when formatting Cabal files. This should accept an unformatted Cabal file as input on STDIN. It should emit a formatted Cabal file to STDOUT. STDERR will be ignored.",
          "type": "string"
        },
        "purple-yolk.cabal.formatter.mode": {
          "default": "discover",
          "description": "The command to format a Cabal file.",
          "enum": [
            "discover",
            "cabal-fmt",
            "custom"
          ],
          "enumItemLabels": [
            "Discover",
            "cabal-fmt",
            "Custom"
          ],
          "markdownEnumDescriptions": [
            "Automatically determines the appropriate command.",
            "Uses `cabal-fmt`.",
            "Uses the command in `#purple-yolk.cabal.formatter.command#`."
          ],
          "type": "string"
        },
        "purple-yolk.haskell.formatter.command": {
          "default": "",
          "description": "The command to run when formatting Haskell files. This should accept an unformatted Haskell file as input on STDIN. It should emit a formatted Haskell file to STDOUT. STDERR will be ignored.",
          "type": "string"
        },
        "purple-yolk.haskell.formatter.mode": {
          "default": "discover",
          "description": "The command to format a Haskell file.",
          "enum": [
            "discover",
            "fourmolu",
            "ormolu",
            "custom"
          ],
          "enumItemLabels": [
            "Discover",
            "Fourmolu",
            "Ormolu",
            "Custom"
          ],
          "markdownEnumDescriptions": [
            "Automatically determines the appropriate command.",
            "Uses `fourmolu`.",
            "Uses `ormolu`.",
            "Uses the command in `#purple-yolk.haskell.formatter.command#`."
          ],
          "type": "string"
        },
        "purple-yolk.haskell.interpreter.command": {
          "default": "",
          "markdownDescription": "This should pass `-ddump-json` to GHC.",
          "type": "string"
        },
        "purple-yolk.haskell.interpreter.mode": {
          "default": "discover",
          "description": "The command to launch a Haskell interpreter.",
          "enum": [
            "discover",
            "cabal",
            "stack",
            "ghci",
            "custom"
          ],
          "enumItemLabels": [
            "Discover",
            "Cabal",
            "Stack",
            "GHCi",
            "Custom"
          ],
          "markdownEnumDescriptions": [
            "Automatically determines the appropriate command.",
            "Uses `cabal repl`.",
            "Uses `stack ghci`.",
            "Uses `ghci`. Only works with a single file.",
            "Uses the command in `#purple-yolk.haskell.interpreter.custom#`."
          ],
          "type": "string"
        },
        "purple-yolk.haskell.linter.command": {
          "default": "",
          "description": "The command to run when linting Haskell files. This should accept a Haskell file as input on STDIN. It should emit HLint ideas formatted as JSON to STDOUT. STDERR will be ignored.",
          "type": "string"
        },
        "purple-yolk.haskell.linter.mode": {
          "default": "discover",
          "description": "The command to lint a Haskell file.",
          "enum": [
            "discover",
            "hlint",
            "custom"
          ],
          "enumItemLabels": [
            "Discover",
            "HLint",
            "Custom"
          ],
          "markdownEnumDescriptions": [
            "Automatically determines the appropriate command.",
            "Uses `hlint`.",
            "Uses the command in `#purple-yolk.haskell.linter.command#`."
          ],
          "type": "string"
        },
        "purple-yolk.haskell.linter.onSave": {
          "default": false,
          "description": "Should the linter be run automatically on save?",
          "type": "boolean"
        }
      },
      "title": "Purple Yolk"
    },
    "grammars": [
      {
        "language": "cabal",
        "path": "data/grammar/cabal.json",
        "scopeName": "source.cabal"
      },
      {
        "language": "haskell",
        "path": "data/grammar/haskell.json",
        "scopeName": "source.haskell"
      }
    ],
    "languages": [
      {
        "aliases": [
          "Cabal"
        ],
        "configuration": "data/language/cabal.json",
        "extensions": [
          ".cabal"
        ],
        "filenames": [
          "cabal.project.freeze",
          "cabal.project.local",
          "cabal.project"
        ],
        "id": "cabal"
      },
      {
        "aliases": [
          "Haskell"
        ],
        "configuration": "data/language/haskell.json",
        "extensions": [
          ".hs"
        ],
        "id": "haskell"
      }
    ],
    "snippets": [
      {
        "language": "cabal",
        "path": "data/snippet/cabal.json"
      },
      {
        "language": "haskell",
        "path": "data/snippet/haskell.json"
      }
    ]
  },
  "description": "A Haskell IDE.",
  "devDependencies": {
    "@tsconfig/node16": "^16.1.1",
    "@tsconfig/strictest": "^2.0.1",
    "@types/node": "^20.2.3",
    "@types/vscode": "^1.75.1",
    "@types/which": "^3.0.0",
    "@vscode/vsce": "^2.17.0",
    "esbuild": "^0.20.0",
    "typescript": "^5.0.4",
    "which": "^4.0.0"
  },
  "displayName": "Purple Yolk",
  "engines": {
    "node": "^16.17.1",
    "vscode": "^1.81.1"
  },
  "homepage": "https://github.com/tfausak/purple-yolk",
  "icon": "data/image/icon.png",
  "keywords": [
    "haskell"
  ],
  "license": "MIT",
  "main": "dist/client.js",
  "name": "purple-yolk",
  "publisher": "taylorfausak",
  "repository": {
    "type": "git",
    "url": "https://github.com/tfausak/purple-yolk.git"
  },
  "scripts": {
    "vscode:prepublish": "esbuild --bundle --external:vscode --outdir=dist --platform=node --target=node16 source/client.ts"
  },
  "version": "0.12.0"
}
